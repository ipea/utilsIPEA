if (sexo == TRUE){
names[,sexo := base_nomes[NomeProprio,,on="nome"][,.(sexo)]]
}
names <- names[,-"dois_primeiros"]
names <- names[,-"tres_primeiros"]
return(names)
}
find_strdist <- function(um_primeiro,dois_primeiros,tres_primeiros){
pos <- amatch(c(um_primeiro,dois_primeiros,tres_primeiros),nomes$nome, method = "jw", maxDist = 0.07)
pes1 <- stringdist(um_primeiro, nomes$nome[pos[1]], method = "jw")
pes2 <- stringdist(dois_primeiros, nomes$nome[pos[2]], method = "jw")
pes3 <- stringdist(tres_primeiros, nomes$nome[pos[3]], method = "jw")
minimo <- min(pes1,pes2,pes3, na.rm = TRUE)
retorno <- ifelse( minimo == pes1, nomes$nome[pos[1]],
ifelse( minimo == pes2, nomes$nome[pos[2]],
ifelse( minimo == pes3, nomes$nome[pos[3]],
NA)))
return(retorno)
}
extrai_NomeProprio_("IGORRE NOBERTO")
extrai_NomeProprio_ <- function(x, sobrenome = FALSE, sexo = FALSE){
NomeProprio <- NULL
dois_primeiros <- NULL
nome <- NULL
tres_primeiros <- NULL
. <- NULL
base_nomes <- NULL
#Carrega bases necessárias e variáveis--------------------------
#base_nomes <- fread("data/names_gender.csv")
base_nomes <- nomes
patternOneName <- "^[a-zA-Z0-9_]+"
patternTwoNames <- "^[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+"
patternThreeNames <- "^[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+"
#Trata os dados de entrada --------------------------------------
names <- setDT(data.frame(nome = toupper(x)))
#Separa nomes---------------------------------------------------
names[,dois_primeiros := str_extract(nome,patternTwoNames)]
names[,tres_primeiros := str_extract(nome,patternThreeNames)]
names[,um_primeiro := str_extract(nome,patternThreeNames)]
names[, NomeProprio := ifelse(tres_primeiros %in% base_nomes$nome, tres_primeiros,
ifelse(dois_primeiros %in% base_nomes$nome, dois_primeiros,
ifelse(um_primeiro %in% base_nomes$nome, um_primeiro,
ifelse(find_strdist(um_primeiro, dois_primeiros, tres_primeiros) != NA, find_strdist(um_primeiro, dois_primeiros, tres_primeiros),
um_primeiro))))]
if (sobrenome == TRUE){
names[,sobrenome := str_trim(str_replace(nome, NomeProprio, ""))]
}
if (sexo == TRUE){
names[,sexo := base_nomes[NomeProprio,,on="nome"][,.(sexo)]]
}
names <- names[,-"dois_primeiros"]
names <- names[,-"tres_primeiros"]
return(names)
}
extrai_NomeProprio_("IGORRE NOBERTO")
min(NA,NA)
debug(extrai_NomeProprio_)
extrai_NomeProprio_("IGORRE NOBERTO")
names
colnames(names)
names
debug(find_strdist)
extrai_NomeProprio_("IGORRE NOBERTO")
pos
pes
pes1
pes2
pes3
min(pes1,pes2,pes3, na.rm = TRUE)
min(NA,NA, na.rm = TRUE)
?min
undebug(extrai_NomeProprio_)
undebug(find_strdist)
extrai_NomeProprio_("IGORRE NOBERTO")
extrai_NomeProprio_ <- function(x, sobrenome = FALSE, sexo = FALSE){
NomeProprio <- NULL
dois_primeiros <- NULL
nome <- NULL
tres_primeiros <- NULL
. <- NULL
base_nomes <- NULL
#Carrega bases necessárias e variáveis--------------------------
#base_nomes <- fread("data/names_gender.csv")
base_nomes <- nomes
patternOneName <- "^[a-zA-Z0-9_]+"
patternTwoNames <- "^[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+"
patternThreeNames <- "^[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+"
#Trata os dados de entrada --------------------------------------
names <- setDT(data.frame(nome = toupper(x)))
#Separa nomes---------------------------------------------------
names[,dois_primeiros := str_extract(nome,patternTwoNames)]
names[,tres_primeiros := str_extract(nome,patternThreeNames)]
names[,um_primeiro := str_extract(nome,patternThreeNames)]
names[, NomeProprio := ifelse(tres_primeiros %in% base_nomes$nome, tres_primeiros,
ifelse(dois_primeiros %in% base_nomes$nome, dois_primeiros,
ifelse(um_primeiro %in% base_nomes$nome, um_primeiro,
ifelse(find_strdist(um_primeiro, dois_primeiros, tres_primeiros) != NA, find_strdist(um_primeiro, dois_primeiros, tres_primeiros),
um_primeiro))))]
if (sobrenome == TRUE){
names[,sobrenome := str_trim(str_replace(nome, NomeProprio, ""))]
}
if (sexo == TRUE){
names[,sexo := base_nomes[NomeProprio,,on="nome"][,.(sexo)]]
}
names <- names[,-"dois_primeiros"]
names <- names[,-"tres_primeiros"]
names <- names[,-"um_primeiro"]
return(names)
}
debug(extrai_NomeProprio_)
extrai_NomeProprio_("IGORRE NOBERTO")
names
extrai_NomeProprio_ <- function(x, sobrenome = FALSE, sexo = FALSE){
NomeProprio <- NULL
dois_primeiros <- NULL
nome <- NULL
tres_primeiros <- NULL
. <- NULL
base_nomes <- NULL
#Carrega bases necessárias e variáveis--------------------------
#base_nomes <- fread("data/names_gender.csv")
base_nomes <- nomes
patternOneName <- "^[a-zA-Z0-9_]+"
patternTwoNames <- "^[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+"
patternThreeNames <- "^[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+"
#Trata os dados de entrada --------------------------------------
names <- setDT(data.frame(nome = toupper(x)))
#Separa nomes---------------------------------------------------
names[,um_primeiro := str_extract(nome,patternOneName)]
names[,dois_primeiros := str_extract(nome,patternTwoNames)]
names[,tres_primeiros := str_extract(nome,patternThreeNames)]
names[, NomeProprio := ifelse(tres_primeiros %in% base_nomes$nome, tres_primeiros,
ifelse(dois_primeiros %in% base_nomes$nome, dois_primeiros,
ifelse(um_primeiro %in% base_nomes$nome, um_primeiro,
ifelse(find_strdist(um_primeiro, dois_primeiros, tres_primeiros) != NA, find_strdist(um_primeiro, dois_primeiros, tres_primeiros),
um_primeiro))))]
if (sobrenome == TRUE){
names[,sobrenome := str_trim(str_replace(nome, NomeProprio, ""))]
}
if (sexo == TRUE){
names[,sexo := base_nomes[NomeProprio,,on="nome"][,.(sexo)]]
}
names <- names[,-"dois_primeiros"]
names <- names[,-"tres_primeiros"]
names <- names[,-"um_primeiro"]
return(names)
}
undebug(extrai_NomeProprio_)
extrai_NomeProprio_("IGORRE NOBERTO")
debug(extrai_NomeProprio_)
extrai_NomeProprio_("IGORRE NOBERTO")
names
names
debug(find_strdist)
extrai_NomeProprio_("IGORRE NOBERTO")
pos
pes1
nomes$nome[pos[1]]
names
names
find_strdist <- function(um_primeiro,dois_primeiros,tres_primeiros){
pos <- amatch(c(um_primeiro,dois_primeiros,tres_primeiros),nomes$nome, method = "jw", maxDist = 0.07)
pes1 <- stringdist(um_primeiro, nomes$nome[pos[1]], method = "jw")
pes2 <- stringdist(dois_primeiros, nomes$nome[pos[2]], method = "jw")
pes3 <- stringdist(tres_primeiros, nomes$nome[pos[3]], method = "jw")
minimo <- suppressWarnings(min(pes1,pes2,pes3, na.rm = TRUE))
retorno <- ifelse( minimo == pes1, nomes$nome[pos[1]],
ifelse( minimo == pes2, nomes$nome[pos[2]],
ifelse( minimo == pes3, nomes$nome[pos[3]],
NA)))
return(retorno)
}
extrai_NomeProprio_ <- function(x, sobrenome = FALSE, sexo = FALSE){
NomeProprio <- NULL
dois_primeiros <- NULL
nome <- NULL
tres_primeiros <- NULL
. <- NULL
base_nomes <- NULL
#Carrega bases necessárias e variáveis--------------------------
#base_nomes <- fread("data/names_gender.csv")
base_nomes <- nomes
patternOneName <- "^[a-zA-Z0-9_]+"
patternTwoNames <- "^[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+"
patternThreeNames <- "^[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+"
#Trata os dados de entrada --------------------------------------
names <- setDT(data.frame(nome = toupper(x)))
#Separa nomes---------------------------------------------------
names[,um_primeiro := str_extract(nome,patternOneName)]
names[,dois_primeiros := str_extract(nome,patternTwoNames)]
names[,tres_primeiros := str_extract(nome,patternThreeNames)]
names[, NomeProprio := ifelse(tres_primeiros %in% base_nomes$nome, tres_primeiros,
ifelse(dois_primeiros %in% base_nomes$nome, dois_primeiros,
ifelse(um_primeiro %in% base_nomes$nome, um_primeiro,
ifelse(find_strdist(um_primeiro, dois_primeiros, tres_primeiros) != NA, find_strdist(um_primeiro, dois_primeiros, tres_primeiros),
um_primeiro))))]
if (sobrenome == TRUE){
names[,sobrenome := str_trim(str_replace(nome, NomeProprio, ""))]
}
if (sexo == TRUE){
names[,sexo := base_nomes[NomeProprio,,on="nome"][,.(sexo)]]
}
names <- names[,-"dois_primeiros"]
names <- names[,-"tres_primeiros"]
names <- names[,-"um_primeiro"]
return(names)
}
extrai_NomeProprio_("IGORRE NOBERTO")
debug(find_strdist)
debug(extrai_NomeProprio_)
extrai_NomeProprio_("IGORRE NOBERTO")
retorno
"IGORR" != NA
"IGORR" != NA
"IGORR" == NA
NA == NA
extrai_NomeProprio_ <- function(x, sobrenome = FALSE, sexo = FALSE){
NomeProprio <- NULL
dois_primeiros <- NULL
nome <- NULL
tres_primeiros <- NULL
. <- NULL
base_nomes <- NULL
#Carrega bases necessárias e variáveis--------------------------
#base_nomes <- fread("data/names_gender.csv")
base_nomes <- nomes
patternOneName <- "^[a-zA-Z0-9_]+"
patternTwoNames <- "^[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+"
patternThreeNames <- "^[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+"
#Trata os dados de entrada --------------------------------------
names <- setDT(data.frame(nome = toupper(x)))
#Separa nomes---------------------------------------------------
names[,um_primeiro := str_extract(nome,patternOneName)]
names[,dois_primeiros := str_extract(nome,patternTwoNames)]
names[,tres_primeiros := str_extract(nome,patternThreeNames)]
names[, NomeProprio := ifelse(tres_primeiros %in% base_nomes$nome, tres_primeiros,
ifelse(dois_primeiros %in% base_nomes$nome, dois_primeiros,
ifelse(um_primeiro %in% base_nomes$nome, um_primeiro,
ifelse(!is.na(find_strdist(um_primeiro, dois_primeiros, tres_primeiros)), find_strdist(um_primeiro, dois_primeiros, tres_primeiros),
um_primeiro))))]
if (sobrenome == TRUE){
names[,sobrenome := str_trim(str_replace(nome, NomeProprio, ""))]
}
if (sexo == TRUE){
names[,sexo := base_nomes[NomeProprio,,on="nome"][,.(sexo)]]
}
names <- names[,-"dois_primeiros"]
names <- names[,-"tres_primeiros"]
names <- names[,-"um_primeiro"]
return(names)
}
find_strdist <- function(um_primeiro,dois_primeiros,tres_primeiros){
pos <- amatch(c(um_primeiro,dois_primeiros,tres_primeiros),nomes$nome, method = "jw", maxDist = 0.07)
pes1 <- stringdist(um_primeiro, nomes$nome[pos[1]], method = "jw")
pes2 <- stringdist(dois_primeiros, nomes$nome[pos[2]], method = "jw")
pes3 <- stringdist(tres_primeiros, nomes$nome[pos[3]], method = "jw")
minimo <- suppressWarnings(min(pes1,pes2,pes3, na.rm = TRUE))
retorno <- ifelse( minimo == pes1, nomes$nome[pos[1]],
ifelse( minimo == pes2, nomes$nome[pos[2]],
ifelse( minimo == pes3, nomes$nome[pos[3]],
NA)))
return(retorno)
}
debug(extrai_NomeProprio_)
debug(find_strdist)
extrai_NomeProprio_("IGORRE NOBERTO")
extrai_NomeProprio_ <- function(x, sobrenome = FALSE, sexo = FALSE){
NomeProprio <- NULL
dois_primeiros <- NULL
nome <- NULL
tres_primeiros <- NULL
. <- NULL
base_nomes <- NULL
#Carrega bases necessárias e variáveis--------------------------
#base_nomes <- fread("data/names_gender.csv")
base_nomes <- nomes
patternOneName <- "^[a-zA-Z0-9_]+"
patternTwoNames <- "^[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+"
patternThreeNames <- "^[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+"
#Trata os dados de entrada --------------------------------------
names <- setDT(data.frame(nome = toupper(x)))
#Separa nomes---------------------------------------------------
names[,um_primeiro := str_extract(nome,patternOneName)]
names[,dois_primeiros := str_extract(nome,patternTwoNames)]
names[,tres_primeiros := str_extract(nome,patternThreeNames)]
names[, NomeProprio := ifelse(tres_primeiros %in% base_nomes$nome, tres_primeiros,
ifelse(dois_primeiros %in% base_nomes$nome, dois_primeiros,
ifelse(um_primeiro %in% base_nomes$nome, um_primeiro,
ifelse(!is.na(find_strdist(um_primeiro, dois_primeiros, tres_primeiros)), find_strdist(um_primeiro, dois_primeiros, tres_primeiros),
um_primeiro))))]
if (sobrenome == TRUE){
names[,sobrenome := str_trim(str_replace(nome, NomeProprio, ""))]
}
if (sexo == TRUE){
names[,sexo := base_nomes[NomeProprio,,on="nome"][,.(sexo)]]
}
names <- names[,-"dois_primeiros"]
names <- names[,-"tres_primeiros"]
names <- names[,-"um_primeiro"]
return(names)
}
find_strdist <- function(um_primeiro,dois_primeiros,tres_primeiros){
pos <- amatch(c(um_primeiro,dois_primeiros,tres_primeiros),nomes$nome, method = "jw", maxDist = 0.07)
pes1 <- stringdist(um_primeiro, nomes$nome[pos[1]], method = "jw")
pes2 <- stringdist(dois_primeiros, nomes$nome[pos[2]], method = "jw")
pes3 <- stringdist(tres_primeiros, nomes$nome[pos[3]], method = "jw")
minimo <- suppressWarnings(min(pes1,pes2,pes3, na.rm = TRUE))
retorno <- ifelse( minimo == pes1, nomes$nome[pos[1]],
ifelse( minimo == pes2, nomes$nome[pos[2]],
ifelse( minimo == pes3, nomes$nome[pos[3]],
NA)))
return(retorno)
}
extrai_NomeProprio_("IGORRE NOBERTO")
extrai_NomeProprio_("MARIACLARA")
extrai_NomeProprio_("EDILEUSA SOUSA")
extrai_NomeProprio_("EDILEUSA MARIA SOUSA")
extrai_NomeProprio_("EDILEUSAMARIA SOUSA")
rm(extrai_NomeProprio_())
library(utilsIPEA)
extrai_NomeProprio("EDILEUSA MARIA DA COSTA")
getwd()
library(utilsIPEA)
extrai_NomeProprio("EDILEUSA MARIA DA COSTA")
extrai_NomeProprio <- function(x, sobrenome = FALSE, sexo = FALSE, stringdist = TRUE, spaces = TRUE){
if(file.exists("data/names_gender.csv")){
extrai_NomeProprio_(x = x, sobrenome = sobrenome, sexo = sexo)
} else {
print("Downloading source data...")
require(RCurl)
url_base <- getURL("https://gist.githubusercontent.com/igornoberto/a7e03289632f80dd05027c01f36a851d/raw/1d5cdffadadfa7f1c342eff06584ad428c10b734/base_nomes.csv")
write.table(url_base,"data/names_gender.csv", sep = ",", quote = FALSE)
extrai_NomeProprio_(x = x, sobrenome = sobrenome, sexo = sexo)
}
}
x
if(file.exists("data/names_gender.csv")){
print("ola")
}
if(file.exists("data/names_gender.csv")){
print("ola")
}
if(!file.exists("data/names_gender.csv")){
print("ola")
}
nomes <- fread("K:/Igor N/nomes.csv")
library(data.table)
nomes <- fread("K:/Igor N/nomes.csv")
write.table(nomes,"data/nomes.csv", sep = ",", quote = FALSE)
fwrite(nomes,"data/nomes.csv", sep = ",", quote = FALSE)
?fwrite
fwrite(nomes,"data/nomes.csv")
fwrite(nomes,"C:/Users/b3359581/Downloads/nomes.csv")
fwrite(nomes,"C:/Users/b3359581/Downloads/pasta/nomes.csv")
?dir.create
dir.create("/data")
getwd()
dir.create(paste0(getwd(),"/data"))
fwrite(nomes,"data/nomes.csv")
library(utilsIPEA)
extrai_NomeProprio("EDILEUSA MARIA DA SOUSA")
rm(extrai_NomeProprio())
library(utilsIPEA)
extrai_NomeProprio("EDILEUSA MARIA")
library(utilsIPEA)
extrai_NomeProprio("EDILEUSA MARIA")
library(utilsIPEA)
extrai_NomeProprio("EDILEUSA MARIA")
library(utilsIPEA)
extrai_NomeProprio("EDILEUSA MARIA")
nomes <- fread("K:/Igor N/WD/utilsIPEA/data")
nomes <- fread("K:/Igor N/WD/utilsIPEA/data/names_gender.csv")
colnames(nomes)
head(nomes)
library(utilsIPEA)
extrai_NomeProprio("EDILEUSA MARIA")
extrai_NomeProprio("EDILEUSA MARIA DE SOUSA")
tail(nomes)
library(utilsIPEA)
extrai_NomeProprio("EDILEUSA MARIA DE SOUSA")
extrai_NomeProprio("ANA CLARA DE SOUSA")
extrai_NomeProprio("ANA CLARA DE SOUSA")
extrai_NomeProprio("ANACLARA DE SOUSA")
url_base <- getURL("https://gist.githubusercontent.com/igornoberto/60eb1956e25c84c4b94b1f91f69017f0/raw/cbc007cd86342382327ab141463f4152b38fdc5e/nomes.csv")
nomes <- fread("K:/Igor N/WD/utilsIPEA/data/names_gender.csv")
tail(nomes)
which(nomes$V1 == "ANACLARA")
which(nomes$V1 == "EDILEUSAMARIA")
extrai_NomeProprio("EDILEUSA MARIA DE SOUSA")
extrai_NomeProprio("EDILEUSAMARIA DE SOUSA")
library(utilsIPEA)
extrai_NomeProprio("EDILEUSA MARIA DE SOUSA")
extrai_NomeProprio("EDILEUSA MARIA DE SOUSA")
library(utilsIPEA)
extrai_NomeProprio("EDILEUSA MARIA DE SOUSA")
extrai_NomeProprio("EDILEUSAMARIA DE SOUSA")
extrai_NomeProprio("EDILEUSA DE SOUSA")
extrai_NomeProprio("MARIA CLARA DE SOUSA")
extrai_NomeProprio("MARIACLARA DE SOUSA")
extrai_NomeProprio("IGOR FERNANDO DE SOUSA")
extrai_NomeProprio("IGORFERNANDO DE SOUSA")
extrai_NomeProprio("STROGONOFERST DE SOUSA")
library(stringdist)
?amatch
.libPaths()
library(utilsIPEA)
extrai_NomeProprio("EDILEUSA MARIA DE SOUSA")
extrai_NomeProprio("EDILEUSAMARIA DE SOUSA")
debug(extrai_NomeProprio)
find_strdist <- function(um_primeiro,dois_primeiros,tres_primeiros,MaxDist){
suppressWarnings(require(stringdist))
base_nomes <- fread("data/names_gender.csv")
pos <- amatch(c(um_primeiro,dois_primeiros,tres_primeiros),base_nomes$V1, method = "jw", maxDist = MaxDist)
pes1 <- stringdist(um_primeiro, base_nomes$V1[pos[1]], method = "jw")
pes2 <- stringdist(dois_primeiros, base_nomes$V1[pos[2]], method = "jw")
pes3 <- stringdist(tres_primeiros, base_nomes$V1[pos[3]], method = "jw")
minimo <- suppressWarnings(min(pes1,pes2,pes3, na.rm = TRUE))
retorno <- ifelse( minimo == pes1, base_nomes$V1[pos[1]],
ifelse( minimo == pes2, base_nomes$V1[pos[2]],
ifelse( minimo == pes3, base_nomes$V1[pos[3]],
NA)))
return(retorno)
}
debug(find_strdist)
extrai_NomeProprio("EDILEUSAMARIA DE SOUSA")
extrai_NomeProprio <- function(x, sobrenome = FALSE, sexo = FALSE, stringdist = TRUE, spaces = TRUE, MaxDist = 0.07){
if(file.exists("data/names_gender.csv")){
extrai_NomeProprio_(x = x, sobrenome = sobrenome, sexo = sexo, stringdist = stringdist, spaces = spaces)
} else {
print("Downloading source data...")
require(RCurl)
url_base <- getURL("https://gist.githubusercontent.com/igornoberto/60eb1956e25c84c4b94b1f91f69017f0/raw/cbc007cd86342382327ab141463f4152b38fdc5e/nomes.csv")
dir.create(paste0(getwd(),"/data"))
write.table(url_base,"data/names_gender.csv", sep = ",", quote = FALSE)
extrai_NomeProprio_(x = x, sobrenome = sobrenome, sexo = sexo, stringdist = stringdist, spaces = spaces)
}
}
find_strdist <- function(um_primeiro,dois_primeiros,tres_primeiros,MaxDist){
suppressWarnings(require(stringdist))
base_nomes <- fread("data/names_gender.csv")
pos <- amatch(c(um_primeiro,dois_primeiros,tres_primeiros),base_nomes$V1, method = "jw", maxDist = MaxDist)
pes1 <- stringdist(um_primeiro, base_nomes$V1[pos[1]], method = "jw")
pes2 <- stringdist(dois_primeiros, base_nomes$V1[pos[2]], method = "jw")
pes3 <- stringdist(tres_primeiros, base_nomes$V1[pos[3]], method = "jw")
minimo <- suppressWarnings(min(pes1,pes2,pes3, na.rm = TRUE))
retorno <- ifelse( minimo == pes1, base_nomes$V1[pos[1]],
ifelse( minimo == pes2, base_nomes$V1[pos[2]],
ifelse( minimo == pes3, base_nomes$V1[pos[3]],
NA)))
return(retorno)
}
extrai_NomeProprio_ <- function(x, sobrenome, sexo, stringdist, spaces, MaxDist){
NomeProprio <- NULL
dois_primeiros <- NULL
nome <- NULL
tres_primeiros <- NULL
. <- NULL
base_nomes <- NULL
#Carrega bases necessárias e variáveis--------------------------
base_nomes <- fread("data/names_gender.csv")
patternOneName <- "^[a-zA-Z0-9_]+"
patternTwoNames <- "^[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+"
patternThreeNames <- "^[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+\\s[a-zA-Z0-9_]+"
#Trata os dados de entrada --------------------------------------
names <- setDT(data.frame(nome = toupper(x)))
#Separa nomes---------------------------------------------------
names[,um_primeiro := str_extract(nome,patternOneName)]
names[,dois_primeiros := str_extract(nome,patternTwoNames)]
names[,tres_primeiros := str_extract(nome,patternThreeNames)]
if(stringdist == TRUE){
names[, NomeProprio := ifelse(tres_primeiros %in% base_nomes$V1, tres_primeiros,
ifelse(dois_primeiros %in% base_nomes$V1, dois_primeiros,
ifelse(um_primeiro %in% base_nomes$V1, um_primeiro,
ifelse(!is.na(find_strdist(um_primeiro, dois_primeiros, tres_primeiros, MaxDist)), find_strdist(um_primeiro, dois_primeiros, tres_primeiros, MaxDist),
um_primeiro))))]
}
if(stringdist == FALSE){
names[, NomeProprio := ifelse(tres_primeiros %in% base_nomes$V1, tres_primeiros,
ifelse(dois_primeiros %in% base_nomes$V1, dois_primeiros,
str_extract(names$nome,patternOneName)))]
}
if(sobrenome == TRUE){
names[,sobrenome := str_trim(str_replace(nome, NomeProprio, ""))]
}
if(sexo == TRUE){
names[,sexo := base_nomes[NomeProprio,,on="nome"][,.(V2)]]
}
if(spaces == FALSE){
names[,NomeProprio := str_replace_all(NomeProprio," ","")]
}
names <- names[,-"dois_primeiros"]
names <- names[,-"tres_primeiros"]
names <- names[,-"um_primeiro"]
return(names)
}
debug(extrai_NomeProprio)
debug(extrai_NomeProprio_)
debug(find_strdist)
extrai_NomeProprio("EDILEUSAMARIA DE SOUSA")
library(data.table)
library(RCurl)
library(stringr)
library(stringdist)
extrai_NomeProprio("EDILEUSAMARIA DE SOUSA")
rm(extrai_NomeProprio())
?stop
library(utilsIPEA)
extrai_NomeProprio('IGOR NOBERTO CAMELO')
extrai_NomeProprio('IGOR NOBERTO CAMELO')
extrai_NomeProprio('IGOR NOBERTO CAMELO', surname = "fasd")
extrai_NomeProprio('IGOR NOBERTO CAMELO', surname = TRUE)
library(utilsIPEA)
